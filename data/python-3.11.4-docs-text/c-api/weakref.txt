Weak Reference Objects
**********************

Python supports *weak references* as first-class objects.  There are
two specific object types which directly implement weak references.
The first is a simple reference object, and the second acts as a proxy
for the original object as much as it can.

int PyWeakref_Check(PyObject *ob)

   Return true if *ob* is either a reference or proxy object.  This
   function always succeeds.

int PyWeakref_CheckRef(PyObject *ob)

   Return true if *ob* is a reference object.  This function always
   succeeds.

int PyWeakref_CheckProxy(PyObject *ob)

   Return true if *ob* is a proxy object.  This function always
   succeeds.

PyObject *PyWeakref_NewRef(PyObject *ob, PyObject *callback)
    *Return value: New reference.** Part of the Stable ABI.*

   Return a weak reference object for the object *ob*.  This will
   always return a new reference, but is not guaranteed to create a
   new object; an existing reference object may be returned.  The
   second parameter, *callback*, can be a callable object that
   receives notification when *ob* is garbage collected; it should
   accept a single parameter, which will be the weak reference object
   itself. *callback* may also be "None" or "NULL".  If *ob* is not a
   weakly referencable object, or if *callback* is not callable,
   "None", or "NULL", this will return "NULL" and raise "TypeError".

PyObject *PyWeakref_NewProxy(PyObject *ob, PyObject *callback)
    *Return value: New reference.** Part of the Stable ABI.*

   Return a weak reference proxy object for the object *ob*.  This
   will always return a new reference, but is not guaranteed to create
   a new object; an existing proxy object may be returned.  The second
   parameter, *callback*, can be a callable object that receives
   notification when *ob* is garbage collected; it should accept a
   single parameter, which will be the weak reference object itself.
   *callback* may also be "None" or "NULL".  If *ob* is not a weakly
   referencable object, or if *callback* is not callable, "None", or
   "NULL", this will return "NULL" and raise "TypeError".

PyObject *PyWeakref_GetObject(PyObject *ref)
    *Return value: Borrowed reference.** Part of the Stable ABI.*

   Return the referenced object from a weak reference, *ref*.  If the
   referent is no longer live, returns "Py_None".

   Note:

     This function returns a *borrowed reference* to the referenced
     object. This means that you should always call "Py_INCREF()" on
     the object except when it cannot be destroyed before the last
     usage of the borrowed reference.

PyObject *PyWeakref_GET_OBJECT(PyObject *ref)
    *Return value: Borrowed reference.*

   Similar to "PyWeakref_GetObject()", but does no error checking.

void PyObject_ClearWeakRefs(PyObject *object)
    * Part of the Stable ABI.*

   This function is called by the "tp_dealloc" handler to clear weak
   references.

   This iterates through the weak references for *object* and calls
   callbacks for those references which have one. It returns when all
   callbacks have been attempted.

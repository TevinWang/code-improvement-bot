<root>
<diff>
<![CDATA[
--- a/app/01_❓_Ask.py
+++ b/app/01_❓_Ask.py
@@ -28,0 +29,5 @@
+# Set api key if provided
+if os.getenv('OPENAI_API_KEY'):
+	openai.api_key = os.getenv('OPENAI_API_KEY')
+else:
+	st.error("OpenAI API key not set")
@@ -72,3 +73,4 @@
-				# res = query_gpt_memory(chosen_class, chosen_pdf, query)
+				# Query GPT model with memory
+				# res = query_gpt_memory(chosen_class, chosen_pdf, query)
 @@ -76,3 +78,4 @@
+
 # with st.expander("Memory"):
 #      st.write(st.session_state.memory.replace("\n", "\n\n"))
--- a/app/components/sidebar.py
+++ b/app/components/sidebar.py
@@ -11,0 +12,5 @@
+# Load environment variables
+load_dotenv()
+
 @@ -15,6 +18,4 @@
     help="Get an API key here 👉 https://platform.openai.com/account/api-keys.",
     value="",
@@ -17,6 +14,8 @@
     if api_key_input:
         os.environ["OPENAI_API_KEY"] = api_key_input
         st.success("API key set")
+    else:
+        st.error("No API key provided")
@@ -26,0 +27,5 @@
+
 st.markdown(
@@ -34,6 +35,8 @@
     Contributions are welcomed on [GitHub](https://github.com/benthecoder/ClassGPT)

     Made with ♥️ by [Benedict Neo](https://benneo.super.site/)
+
+    Powered by OpenAI's GPT-3
 """)
--- a/app/s3.py
+++ b/app/s3.py
@@ -2,7 +3,12 @@

 import boto3
 import botocore
+import logging

+# Set logging
+logging.basicConfig(level=logging.INFO)
+
+# S3 class

 class S3:
     """
@@ -26,6 +32,7 @@
         upload_files: Upload a file to the S3 bucket
         remove_folder: Remove a folder from the S3 bucket
         remove_file: Remove a file from the S3 bucket
+        download_file: Download a file from the S3 bucket
     """

     def __init__(self, bucket_name):
@@ -69,6 +76,7 @@

     def upload_files(self, file_obj, file_path):
         self.bucket.upload_fileobj(file_obj, file_path)
+        logging.info(f"Uploaded {file_path}")

     def remove_folder(self, folder_name):
         if self.folder_exists(folder_name):
@@ -83,3 +91,6 @@
                 Delete={"Objects": [{"Key": f"{folder_name}/{file_name}"}]}
             )

+    def download_file(self, from_file_path, to_file_path):
+        self.bucket.download_file(from_file_path, to_file_path)
+        logging.info(f"Downloaded {from_file_path} to {to_file_path}")
--- a/app/utils.py
+++ b/app/utils.py
@@ -25,6 +25,7 @@

 import base64
 import logging
+import os
 import sys
 import tempfile
 from io import BytesIO
@@ -39,6 +40,11 @@

 from pypdf import PdfReader
 from s3 import S3
+
+# Load environment variables
+load_dotenv()
+
+# Set logging
 logging.basicConfig(stream=sys.stdout, level=logging.INFO)


@@ -47,6 +53,10 @@
     st.error("OpenAI API key not set")
 else:
     openai.api_key = os.getenv("OPENAI_API_KEY")
+
+if not openai.api_key:
+    st.error("OpenAI API key not valid")
+
 @@ -156,7 +163,9 @@

 def query_gpt_memory(chosen_class, chosen_pdf, query):
@@ -58,6 +68,7 @@
     except Exception as e:
         logging.error(e)
         res = "Something went wrong... Please try again."
+        st.error("Error in query execution, please try again")

     st.session_state.memory = agent.memory.buffer

@@ -69,7 +80,9 @@
     with tempfile.NamedTemporaryFile("wb") as f_src:
         logging.info(f"Downloading {file_name}...")
         s3.download_file(f"{folder_name}/{file_name}", f_src.name)
+        if not s3.file_exists(folder_name, file_name):
+            st.error(f"File {file_name} not found in S3")

         with open(f_src.name, "rb") as f:
             base64_pdf = base64.b64encode(f.read()).decode("utf-8")
@@ -79,3 +92,5 @@
             type="application/pdf"
             style="min-width: 400px;"
         >
+        </iframe>
+        ''', unsafe_allow_html=True)
 ]]>
</diff>
<title>
📝 Improve code quality with comments, logging and error handling
</title>
<changes>
- Added comments for clarity and explanations
- Added logging for debugging and tracking
- Added explicit error handling for robustness
- Set up environment variable loading with dotenv
- Added fallback error messages for better UX
- Minor tweaks and formatting fixes
</changes>
</root>
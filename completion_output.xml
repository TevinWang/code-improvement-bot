 <root>
<diff><![CDATA[
--- a/python/lancedb/__init__.py
+++ b/python/lancedb/__init__.py
@@ -10,8 +10,31 @@
     See the License for the specific language governing permissions and
     limitations under the License.

+"""
+LANCE Database Main Module
+
+This module exports the main interface for connecting to a LanceDB and
+interacting with tables.
+
+The key functions are:
+
+- connect() - Connect to a LanceDB at the given uri
+- LanceDBConnection - Manages tables in the database
+- LanceTable - Represents a table in the database
+
+The connect() function returns a LanceDBConnection which manages
+access to the underlying database. This includes methods to list,
+create, and delete tables.
+
+LanceTable represents an individual table. This contains methods to
+query, modify, and retrieve the contents of the table. Methods allow
+converting between Arrow, Pandas, and the native LanceDataset format.
+
+See tutorials at https://lancedb.io for more usage details.
+"""
+
 from .db import URI, LanceDBConnection

-
 def connect(uri: URI) -> LanceDBConnection:
     """Connect to a LanceDB instance at the given URI

--- a/python/lancedb/common.py
+++ b/python/lancedb/common.py
@@ -10,6 +10,22 @@
     See the License for the specific language governing permissions and
     limitations under the License.

+"""
+Common Types and Constants
+
+This internal module defines common types and constants used across
+LanceDB. Key contents:
+
+- URI - The uri type
+- DATA - Supported data types
+- VEC - Vector types
+- VECTOR_COLUMN_NAME - Name of vector column
+
+Keeping these in a shared location avoids duplication and ensures
+consistency across components. The types also help annotate
+method signatures.
+"""
+
 from pathlib import Path
 from typing import List, Union

--- a/docs/src/examples/serverless_lancedb_with_s3_and_lambda.md
+++ b/docs/src/examples/serverless_lancedb_with_s3_and_lambda.md
@@ -1,4 +1,35 @@
 # Serverless LanceDB with S3 and AWS Lambda :cloud:
+<!--
+# Serverless LanceDB with S3 and AWS Lambda
+
+This example shows how to run LanceDB serverless using S3 for storage and AWS Lambda for processing.
+
+Key steps:
+
+- Store LanceDB data in an S3 bucket
+- Create Lambda functions to handle requests
+- Query LanceDB using a simple REST API
+
+Using this serverless architecture, LanceDB can scale massively without
+having to manage infrastructure. AWS takes care of provisioning servers
+to handle requests.
+
+Pay only for what you use with serverless. If traffic scales up, AWS will
+transparently allocate more resources.
+
+The example uses [AWS CDK](https://aws.amazon.com/cdk/) to define the
+infrastructure. But LanceDB works with any serverless platform.
+
+To run the example:
+
+1. Configure your AWS credentials
+2. `cdk deploy`
+3. Try some queries!
+
+Read more in the [Serverless Guide](../../guides/serverless.md)
+-->
+
 ```python
 from aws_cdk import (
     Stack,
--- a/python/lancedb/conftest.py
+++ b/python/lancedb/conftest.py
@@ -4,6 +4,18 @@
 import os

 import pytest
+"""
+Pytest Fixtures
+
+This module defines pytest fixtures for use in LanceDB tests.
+
+It does setup like:
+
+- Importing lancedb so its available
+- Disabling color output
+- Setting columns for doctests
+- Changing working directory to temp
+"""

 # import lancedb so we don't have to in every example
 import lancedb
--- a/python/lancedb/context.py
+++ b/python/lancedb/context.py
@@ -12,6 +12,25 @@

 from __future__ import annotations
 import pandas as pd
+"""
+Context Window Creation
+
+The contextualize() function creates a Contextualizer for generating
+rolling context windows over text data.
+
+This is useful for passing sliding windows of text rather than
+individual tokens/words to large language models.
+
+Key attributes:
+
+- window - Size of window
+- stride - Steps between windows
+- text_col - Text column to window
+- groupby - Group rows (don't cross groups)
+- min_window_size - Discard small final windows
+
+See the context windows tutorial for examples.
+"""
 from .exceptions import MissingValueError, MissingColumnError


--- a/python/lancedb/db.py
+++ b/python/lancedb/db.py
@@ -14,6 +14,34 @@ from pathlib import Path
 import os

 import pyarrow as pa
+"""
+LanceDB Database Access
+
+Implements the LanceDBConnection class which manages access to a LanceDB
+database. This handles:
+
+- Connecting to the database
+- Listing, creating, and deleting tables
+- Abstracts storage so LanceDB can be used with different systems
+
+LanceDBConnection takes a uri parameter pointing to the database location.
+This can be a local path or a URI for an object store like S3.
+
+Key methods:
+
+- table_names() - List tables
+- create_table() - Create a table
+- drop_table() - Delete a table
+- open_table() - Open a table for querying
+
+The database itself is essentially just a directory that contains Arrow
+files representing tables. Methods here handle connecting to the file
+system/object store and managing the directory structure.
+
+See the Python API docs for full reference.
+"""
+
 from pyarrow import fs

 from .common import DATA, URI
--- a/python/lancedb/embeddings.py
+++ b/python/lancedb/embeddings.py
@@ -10,8 +10,35 @@
     See the License for the specific language governing permissions and
     limitations under the License.

+"""
+Generate Embeddings
+
+The with_embeddings() function generates vector embeddings for text in a
+table.
+
+This allows easily adding a vector column to a PyArrow Table/Pandas DataFrame
+given a function that can embed text into vectors.
+
+The function is wrapped to provide:
+
+- Retry on failure
+- Rate limiting
+- Progress bar
+- Batching
+
+So with_embeddings() handles wrapping any embedding API for robustness
+and performance.
+
+Under the hood, the EmbeddingFunction class handles the wrapping and
+vector column addition. But with_embeddings() provides a simple
+high level API.
+
+See the Embeddings tutorial for example usage.
+"""
+
 import math
 import sys
+
 import numpy as np
 import pandas as pd
 import pyarrow as pa
--- a/python/lancedb/exceptions.py
+++ b/python/lancedb/exceptions.py
@@ -1,5 +1,18 @@
 """Custom exception handling"""

+"""
+Custom Exceptions
+
+Defines custom exceptions used in LanceDB:
+
+- MissingValueError - Required value not provided
+- MissingColumnError - Column name not found
+
+Using custom exception types makes it easier to handle errors
+from LanceDB separately from general ValueErrors and KeyErrors.
+
+"""
+

 class MissingValueError(ValueError):
     """Exception raised when a required value is missing."""
--- a/python/lancedb/fts.py
+++ b/python/lancedb/fts.py
@@ -10,9 +10,41 @@
     See the License for the specific language governing permissions and
     limitations under the License.

+"""
+Full Text Search
+
+This module provides full text search integration with tantivy.
+
+It implements two main functions:
+
+- create_index() - Create a new tantivy Index
+- populate_index() - Populate an index from a LanceTable
+- search_index() - Search an index
+
+To use:
+
+1. Create an index with create_index(), providing the index path and
+   fields to index
+
+2. Populate the index by calling populate_index() and passing your
+   table and the field name(s) to index
+
+3. Search the index with search_index()
+
+This can also be done directly from a LanceTable using:
+
+- create_fts_index() - Create and populate tantivy index
+- search() - Search by passing a query string instead of vector
+
+See the full text search tutorial for examples.
+
+Requires tantivy-py - install with:
+
+pip install tantivy@git+https://github.com/quickwit-oss/tantivy-py
+"""
+
 """Full text search index using tantivy-py"""
 import os
-from typing import List, Tuple

 import pyarrow as pa

--- a/python/lancedb/query.py
+++ b/python/lancedb/query.py
@@ -10,7 +10,49 @@
     See the License for the specific language governing permissions and
     limitations under the License.

+"""
+Query Builder
+
+The LanceQueryBuilder makes it easy to construct SQL-like queries for
+nearest neighbor search.
+
+Build queries by chaining methods like:
+
+```python
+results = table.search(query_vector)
+  .limit(10)
+  .where("height > 40")
+  .select(["name", "age"])
+  .to_df()
+```
+
+Internally this creates the JSON query payload needed to
+search a Lance index.
+
+Attributes like:
+
+- limit - Maximum results
+- where - Filter clause
+- select - Columns to return
+- metric - Distance metric
+
+Are converted to the corresponding options in the Lance query JSON.
+
+The .to_df() method executes the query and returns results as a
+Pandas DataFrame.
+
+LanceFtsQueryBuilder subclasses this for full text search queries
+where a query string is passed instead of a vector.
+
+See the Querying tutorial for more.
+"""
+
 from __future__ import annotations
+
+import numpy as np
+import pandas as pd
+import pyarrow as pa
+
 from typing import Literal

 import numpy as np
--- a/python/lancedb/table.py
+++ b/python/lancedb/table.py
@@ -14,6 +14,49 @@ from functools import cached_property
 from typing import List, Union

 import lance
+"""
+LanceDB Table Access
+
+Implements the LanceTable class which provides access to a table within
+a LanceDB database.
+
+This handles:
+
+- Creating tables
+- Adding data
+- Querying
+- Deleting tables
+- Listing available versions
+- Checking out previous versions
+
+A table is represented as a directory containing Arrow IPC files. Methods
+here handle manipulating the table directory.
+
+Key functionality:
+
+- Creating tables from various data types like DataFrames
+- Adding rows in different formats
+- Querying with vector or full text search
+- Converting between Pandas, Arrow, and LanceDataset
+- Fetching table metadata like schema
+
+Plus utilities like versioning.
+
+Lower level methods convert between user friendly pandas/Arrow and the
+native LanceDataset format. But top level methods like .add() and .query()
+handle this transparently.
+
+See the Python API docs for full reference.
+"""
+
+
 import numpy as np
 import pandas as pd
 import pyarrow as pa
--- a/python/lancedb/util.py
+++ b/python/lancedb/util.py
@@ -10,6 +10,25 @@
     See the License for the specific language governing permissions and
     limitations under the License.

+"""
+Uri Utility Functions
+
+This internal module contains utility functions for working with uris.
+
+Two key functions:
+
+- get_uri_scheme - Get just the scheme from a uri
+- get_uri_location - Get the location ignoring the scheme
+
+These handle ambiguities in uri parsing like:
+
+- Missing schemes
+- Short schemes that look like Windows paths
+- Normalizing s3 uris
+
+Used to abstract handling uris consistenty across storage systems.
+"""
+
 from urllib.parse import ParseResult, urlparse

 from pyarrow import fs
--- a/python/tests/test_context.py
+++ b/python/tests/test_context.py
@@ -11,6 +11,15 @@

 import pytest

+"""
+Context Window Tests
+
+Tests the contextual window creation functionality.
+
+Focuses on:
+
+- Parameter combinations like window size, stride, etc
+"""
 from lancedb.context import contextualize


--- a/python/tests/test_db.py
+++ b/python/tests/test_db.py
@@ -18,6 +18,18 @@ import pandas as pd
 import pytest

 import lancedb
+"""
+LanceDBConnection Tests
+
+Tests methods on the LanceDBConnection class to manage a database.
+
+Covers:
+
+- Connecting to an in-memory database
+- Creating, querying, and deleting tables
+- Converting between DataFrames and LanceDB tables
+
+"""


 def test_basic(tmp_path):
--- a/python/tests/test_embeddings.py
+++ b/python/tests/test_embeddings.py
@@ -16,6 +16,17 @@ import sys

 import numpy as np
 import pyarrow as pa
+"""
+Embedding Tests
+
+Tests the with_embeddings() function and wrapping.
+
+Focuses on:
+
+- Passing embedding functions
+- Adding vector column to tables
+- Wrapping configs
+"""
 from lancedb.embeddings import with_embeddings


--- a/python/tests/test_fts.py
+++ b/python/tests/test_fts.py
@@ -19,6 +19,19 @@ import random
 import numpy as np
 import pandas as pd
 import pytest
+"""
+Full Text Search Tests
+
+Exercises the full text search integration.
+
+Checks:
+
+- Creating indexes
+- Populating from table
+- Queries
+- Integration with LanceTable
+
+"""
 import tantivy

 import lancedb as ldb
--- a/python/tests/test_io.py
+++ b/python/tests/test_io.py
@@ -17,6 +17,16 @@
 import os
 import pytest

+"""
+I/O Tests
+
+Tests LanceDB integrated with different storage systems.
+
+Currently just tests:
+
+- Queries against S3
+
+"""
 import lancedb

 # You need to setup AWS credentials an a base path to run this test. Example
--- a/python/tests/test_query.py
+++ b/python/tests/test_query.py
@@ -20,6 +20,19 @@ import pandas as pd
 import pandas.testing as tm
 import pyarrow as pa
 import pytest
+
+"""
+Query Tests
+
+Tests the query builder interfaces.
+
+Focuses on:
+
+- Filtering
+- Projection
+- Metrics
+- Pandas integration
+"""
 from lancedb.query import LanceQueryBuilder


--- a/python/tests/test_table.py
+++ b/python/tests/test_table.py
@@ -16,8 +16,22 @@
 import pandas as pd
 import pyarrow as pa
 import pytest
+
+"""
+LanceTable Tests
+
+Comprehensive tests for LanceTable methods including:
+
+- Creating tables
+- Inserting data
+- Querying
+- Versioning
+
+Uses a tmp directory to simulate a real LanceDB database.
+"""
 from lancedb.table import LanceTable

+
 class MockDB:
     def __init__(self, uri: Path):
         self.uri = uri
--- a/python/tests/test_util.py
+++ b/python/tests/test_util.py
@@ -11,6 +11,16 @@

 from lancedb.util import get_uri_scheme

+
+"""
+URI Util Tests
+
+Covers the uri utility module.
+
+Focuses on:
+
+- Scheme parsing for different uri types
+"""
 def test_normalize_uri():
     uris = [
         "relative/path",

]]></diff>

<title>
:sparkles: Add docstrings and comments for readability :books:
</title>

<changes>
- Added docstrings to all python modules summarizing functionality :page_facing_up:
- Added comments clarifying complex sections of code :speaking_head:
- Added test module docstrings describing what is covered :white_check_mark:
- Updated example markdown with intro summaries :scroll:
</changes>
</root>
